# Frontend server block
server {
    listen 443 ssl;
    server_name coding-practice.com;
    ssl_certificate /etc/letsencrypt/live/coding-practice.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/coding-practice.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        root /usr/share/nginx/html/frontend;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    # Optional: Add caching for static assets
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
        root /usr/share/nginx/html/frontend;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

# Backend server block
server {
    listen 3000 ssl;
    server_name coding-practice.com;

    ssl_certificate /etc/letsencrypt/live/coding-practice.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/coding-practice.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        rewrite ^/api(.*)$ $1 last;
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-User-ID";
            return 204;
        }
    }
}

server {
    if ($host = coding-practice.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name coding-practice.com;
    return 404; # managed by Certbot
}